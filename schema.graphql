type Bounty @entity {
  id: ID!                                                                 # bountyID

  rewardAmount: BigDecimal!                                               # total reward amount
  rewardPerPeriod: BigDecimal!                                            # reward per period
  maxRewardPerVote: BigDecimal!                                           # maximum reward per vote
  
  numberOfPeriods: BigInt!                                                # number of periods (weeks) for the bounty
  startPeriod: BigInt!                                                    # timestamp when the bounty starts
  endPeriod: BigInt!                                                      # timestamp when the bounty ends

  gauge: Gauge!                                                           # gauge associated with the bounty
  rewardToken: Token!                                                     # reward token associated with the bounty
}

type Bribe @entity {
  id: ID!                                                                 # bribe identifier - bribe index

  proposal: Bytes!                                                        # the hashed address of the associated Gauge
  bribeIdentifier: Bytes!                                                 # the bribe identifier
  rewardIdentifier: Bytes!                                                # the reward identifier

  token: Token!                                                           # the bribe token address
  amount: BigDecimal!                                                     # the bribe amount
  deadline: BigInt!                                                       # timestamp when the bribe ends
  briber: Bytes!                                                          # the bribe creator
}

type Bunni @entity {
  id: Bytes!                                                              # BunniHub address

  protocolFee: BigDecimal!                                                # proportion of swap fees taken by Bunni
  inflationRate: BigDecimal!                                              # rate of oLIT flation

  optionsMultiplier: BigDecimal!                                          # encodes the discount rate for redeeming oLIT
  optionsOracle: Bytes!                                                   # address that provides the options strike price
  optionsTreasury: Bytes!                                                 # address that receives WETH paid during redeption
  wethRedeemed: BigDecimal!                                               # total amount of WETH received from oLIT redemptions 
}

type BunniToken @entity {
  id: Bytes!                                                              # hash of the bunni key

  address: Bytes!                                                         # bunni token address
  decimals: BigInt!                                                       # bunni token decimals
  name: String!                                                           # bunni token name                                         
  symbol: String!                                                         # bunni token symbol
  totalSupply: BigDecimal!                                                # bunni token total supply

  liquidity: BigInt!                                                      # position liquidity
  tickLower: BigInt!                                                      # lower tick of the position
  tickUpper: BigInt!                                                      # upper tick of the position

  amount0PerShare: BigDecimal!                                            # amount of token0 that each full share can be redeemed for
  amount1PerShare: BigDecimal!                                            # amount of token1 that each full share can be redeemed for
  liquidityPerShare: BigDecimal!                                          # liquidity amount that each full share is worth
  reserve0: BigDecimal!                                                   # amount of token0 in the liquidity position
  reserve1: BigDecimal!                                                   # amount of token1 in the liquidity position

  token0Volume: BigDecimal!                                               # total volume processed by the liquidity position in terms of token0
  token1Volume: BigDecimal!                                               # total volume processed by the liquidity position in terms of token1
  token0CollectedFees: BigDecimal!                                        # amount of token0 collected as protocol fees
  token1CollectedFees: BigDecimal!                                        # amount of token1 collected as protocol fees

  gauge: Gauge                                                            # gauge associated with the bunni token
  pool: Pool!                                                             # pool associated with the bunni token   
}

type Gauge @entity {
  id: Bytes!                                                              # hash of the gauge address

  address: Bytes!                                                         # gauge address
  chain: BigInt!                                                          # numeric chain ID associated with the gauge (relevant for root gauges)
  decimals: BigInt!                                                       # gauge decimals
  name: String!                                                           # gauge name
  symbol: String!                                                         # gauge symbol
  totalSupply: BigDecimal!                                                # gauge total supply

  exists: Boolean!                                                        # gauge has been added to the gauge controller
  relativeWeightCap: BigDecimal!                                          # gauge relative weight cap (controls emissions cap)
  tokenlessProduction: BigInt!                                            # gauge tokenless production (controls max boost multiplier)
  type: BigInt!                                                           # gauge type
  workingSupply: BigDecimal!                                              # gauge working supply

  claimedRewards: BigDecimal!                                             # total amount of oLIT claimed from the gauge

  bunniToken: BunniToken!                                                 # bunni token associated with the gauge
  rewardTokens: [RewardToken!]! @derivedFrom(field: "gauge")              # additional reward tokens permitted for the gauge
  votes: [Vote!]! @derivedFrom(field: "gauge")                            # votes associated with the gauge
  bribes: [Bribe!]!                                                       # hidden hand bribes associated with the gauge
  quests: [Quest!]! @derivedFrom(field: "gauge")                          # warden quests associated with the Gauge
  bounties: [Bounty!]! @derivedFrom(field: "gauge")                       # stakedao bounties associated with the Gauge
}

type Pool @entity {
  id: Bytes!                                                              # pool address

  address: Bytes!                                                         # pool address
  fee: BigInt!                                                            # fee tier (10000 = 1%)
  liquidity: BigInt!                                                      # in range liquidity
  sqrtPriceX96: BigInt!                                                   # current price tracker
  tick: BigInt!                                                           # current tick

  token0: Token!                                                          # token0
  token1: Token!                                                          # token1
  token0Price: BigDecimal!                                                # token0 per token1
  token1Price: BigDecimal!                                                # token1 per token0

  reserve0: BigDecimal!                                                   # total amount of token0 in all liquidity positions
  reserve1: BigDecimal!                                                   # total amount of token1 in all liquidity positions

  token0Volume: BigDecimal!                                               # total volume processed by bunni token positions in terms of token0
  token1Volume: BigDecimal!                                               # total volume processed by bunni token positions in terms of token1
  token0CollectedFees: BigDecimal!                                        # total amount of token0 collected as protocol fees from bunni token positions
  token1CollectedFees: BigDecimal!                                        # total amount of token1 collected as protocol fees from bunni token positions

  bunniTokens: [BunniToken!]!                                             # bunni tokens associated with the pool
}

type Quest @entity {
  id: ID!                                                                 # questID

  startPeriod: BigInt!                                                    # timestamp when the quest begins
  deadline: BigInt!                                                       # timestamp when the quest ends
  duration: BigInt!                                                       # number of periods (weeks) for the quest
  objectiveVotes: BigDecimal!                                             # target number of votes for the quest
  rewardPerVote: BigDecimal!                                              # amount of rewards for each vote
  creator: Bytes!                                                         # the quest creator

  gauge: Gauge!                                                           # gauge associated with the quest
  rewardToken: Token!                                                     # reward token associated with the quest
}

type RewardToken @entity {
  id: ID!                                                                 # gauge address - token address

  distributor: Bytes!                                                     # address permitted to distribute the reward token
  gauge: Gauge!                                                           # the associated gauge
  token: Token!                                                           # the associated token
}

type Token @entity {
  id: Bytes!                                                              # token address

  address: Bytes!                                                         # token address
  decimals: BigInt!                                                       # token decimals
  name: String!                                                           # token name                                         
  symbol: String!                                                         # token symbol
}

type User @entity {
  id: Bytes!                                                              # user address

  address: Bytes!                                                         # user address
  positions: [UserPosition!] @derivedFrom(field: "user")                  # list of the user's positions
  votes: [Vote!]! @derivedFrom(field: "user")                             # list of the user's gauge votes
  votingLock: [VotingLock!] @derivedFrom(field: "user")                   # the user's voting lock

  claimedRewards: BigDecimal!                                             # total amount of oLIT claimed by the user
}

type UserPosition @entity {
  id: ID!                                                                 # bunni token address - user address

  user: User!                                                             # the user associated with the position
  balance: BigDecimal!                                                    # amount of bunni tokens held by the user
  gaugeBalance: BigDecimal!                                               # amount of gauge tokens held by the user
  workingBalance: BigDecimal!                                             # user working balance for the gauge

  token0CostBasisPerShare: BigDecimal!                                    # the average amount of token0 used to acquire one share 
  token1CostBasisPerShare: BigDecimal!                                    # the average amount of token1 used to acquire one share
  claimedRewards: BigDecimal!                                             # total amount of oLIT claimed by the position

  bunniToken: BunniToken!                                                 # the bunni token associated with the position
}

type Vote @entity {
  id: ID!                                                                 # gauge address - user address

  power: BigDecimal!                                                      # voting balance used for the vote (balance * vote percent)
  decay: BigDecimal!                                                      # rate that power decays per second
  timestamp: BigInt!                                                      # timestamp when the vote was cast
  weight: BigInt!                                                         # user voting weight allocated to the gauge

  gauge: Gauge!                                                           # gauge associated with the vote
  user: User!                                                             # user associated with the vote
}

type VotingLock @entity {
  id: Bytes!                                                              # user address

  amount: BigDecimal!                                                     # amount of BPT locked
  balance: BigDecimal!                                                    # amount of veLIT received at the time of lock
  decay: BigDecimal!                                                      # rate that balance decays per second
  lastUpdate: BigInt!                                                     # timestamp when the voting lock was last updated
  lockEnd: BigInt!                                                        # timestamp when the voting lock ends

  user: User!                                                             # user associated with the voting lock
}