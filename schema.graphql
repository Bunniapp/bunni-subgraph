type BunniToken @entity {
  id: Bytes!                                                              # hash of the bunni key

  address: Bytes!                                                         # bunni token address
  decimals: BigInt!                                                       # bunni token decimals
  name: String!                                                           # bunni token name                                         
  symbol: String!                                                         # bunni token symbol
  totalSupply: BigDecimal!                                                # bunni token total supply

  liquidity: BigInt!                                                      # position liquidity
  tickLower: BigInt!                                                      # lower tick of the position
  tickUpper: BigInt!                                                      # upper tick of the position

  amount0PerShare: BigDecimal!                                            # amount of token0 that each full share can be redeemed for
  amount1PerShare: BigDecimal!                                            # amount of token1 that each full share can be redeemed for
  liquidityPerShare: BigDecimal!                                          # liquidity amount that each full share is worth
  reserve0: BigDecimal!                                                   # amount of token0 in the liquidity position
  reserve1: BigDecimal!                                                   # amount of token1 in the liquidity position

  token0Fees: BigDecimal!                                                 # amount of token0 collected as protocol fees
  token1Fees: BigDecimal!                                                 # amount of token1 collected as protocol fees
  token0Volume: BigDecimal!                                               # total volume processed by the liquidity position in terms of token0
  token1Volume: BigDecimal!                                               # total volume processed by the liquidity position in terms of token1

  pool: Pool!                                                             # pool         
}

type Pool @entity {
  id: Bytes!                                                              # pool address

  address: Bytes!                                                         # pool address
  fee: BigInt!                                                            # fee tier (10000 = 1%)
  liquidity: BigInt!                                                      # in range liquidity
  sqrtPriceX96: BigInt!                                                   # current price tracker
  tick: BigInt!                                                           # current tick

  token0: Token!                                                          # token0
  token1: Token!                                                          # token1
  token0Price: BigDecimal!                                                # token0 per token1
  token1Price: BigDecimal!                                                # token1 per token0

  reserve0: BigDecimal!                                                   # total amount of token0 in all liquidity positions
  reserve1: BigDecimal!                                                   # total amount of token1 in all liquidity positions

  token0Fees: BigDecimal!                                                 # total amount of token0 collected as protocol fees by bunni token positions
  token1Fees: BigDecimal!                                                 # total amount of token1 collected as protocol fees by bunni token positions
  token0Volume: BigDecimal!                                               # total volume processed by bunni token positions in terms of token0
  token1Volume: BigDecimal!                                               # total volume processed by bunni token positions in terms of token1

  bunniTokens: [BunniToken!]!                                             # bunni tokens associated with the pool
}

type Token @entity {
  id: Bytes!                                                              # token address

  address: Bytes!                                                         # token address
  decimals: BigInt!                                                       # token decimals
  name: String!                                                           # token name                                         
  symbol: String!                                                         # token symbol
}

type User @entity {
  id: Bytes!                                                              # user address

  address: Bytes!                                                         # user address
  positions: [UserPosition!] @derivedFrom(field: "user")                  # list of the user's positions
}

type UserPosition @entity {
  id: ID!                                                                 # bunni token address - user address

  user: User!                                                             # the user associated with the position
  balance: BigDecimal!                                                    # amount of bunni tokens held by the user
  bunniToken: BunniToken!                                                 # the bunni token associated with the position
  
  token0CostBasisPerShare: BigDecimal!                                    # the average amount of token0 used to acquire one share 
  token1CostBasisPerShare: BigDecimal!                                    # the average amount of token1 used to acquire one share 
}